
01. # requirements

pip install celery redis




02. # celery.py in project folder

from __future__ import absolute_import, unicode_literals
import os
from celery import Celery

# Set default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')

app = Celery('your_project')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
# - namespace='CELERY' means all celery-related config keys should have a `CELERY_` prefix.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django app configs.
app.autodiscover_tasks()






03. init.py in project folder 
from __future__ import absolute_import, unicode_literals

# This will make sure the app is always imported when
# Django starts so that shared_task will use this app.
from .celery import app as celery_app

__all__ = ('celery_app',)


04. setting.py 

# Celery settings
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Example using Redis
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'



05. taskes.py in app folder

from celery import shared_task
import stripe
from django.core.files.storage import default_storage
from .models import Product
from django.conf import settings

# Set Stripe secret key
stripe.api_key = settings.STRIPE_TEST_SECRET_KEY

@shared_task
def create_stripe_product_and_upload_image(product_id, image_path):
    try:
        # Fetch the product instance
        product = Product.objects.get(id=product_id)

        # Upload image to your file storage (just a placeholder, modify as needed)
        if image_path:
            # Simulating image upload task to external storage (e.g., S3, Cloudinary, etc.)
            uploaded_image = default_storage.save(image_path, product.image)
            product.image = uploaded_image

        # Create a Stripe product
        stripe_product = stripe.Product.create(
            name=product.product_name,
            description=product.description,
            images=[product.image.url] if product.image else []
        )

        # Create a Stripe price for the product
        stripe_price = stripe.Price.create(
            unit_amount=int(product.price * 100),  # Amount in cents
            currency='usd',  # Modify the currency as needed
            product=stripe_product.id,
        )

        # Save the Stripe price_id to your product instance
        product.stripe_price_id = stripe_price.id
        product.save()

        return f"Product {product.product_name} created with Stripe Price ID: {stripe_price.id}"

    except Exception as e:
        return f"Error creating Stripe product: {str(e)}"



06. use the task function with delay and name where your background taks needed
create_stripe_product_and_upload_image.delay(product.id, request.FILES.get('image').name)






07. Run celery worker in bash
celery -A toto_shop worker -l info

