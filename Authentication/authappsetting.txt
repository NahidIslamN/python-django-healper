01. installed app

INSTALLED_APPS = [
    'api',
    'rest_framework',
    'rest_framework_simplejwt',
]


# 02. define rest framewort authentication 

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ]
}


from datetime import timedelta


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}


03. Define CustomUser Model in settings

AUTH_USER_MODEL = 'api.CustomUser'



04. Email Backends configuration



EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # e.g., 'smtp.example.com'
EMAIL_PORT = 587  # Port for SMTP (usually 587 for TLS)
EMAIL_USE_TLS = True  # Whether to use TLS encryption
EMAIL_HOST_USER = 'your host user'  # Your email address
EMAIL_HOST_PASSWORD = "your_app_email"  # Your email password or app password if using Gmail
DEFAULT_FROM_EMAIL = 'your defalt sender'  # Default sender email address







+ celery setting


02. # celery.py in project folder

from __future__ import absolute_import, unicode_literals
import os
from celery import Celery

# Set default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')

app = Celery('your_project')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
# - namespace='CELERY' means all celery-related config keys should have a `CELERY_` prefix.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django app configs.
app.autodiscover_tasks()






03. init.py in project folder 
from __future__ import absolute_import, unicode_literals

# This will make sure the app is always imported when
# Django starts so that shared_task will use this app.
from .celery import app as celery_app

__all__ = ('celery_app',)


04. setting.py 

# Celery settings
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Example using Redis
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'




07. Run celery worker in bash
celery -A toto_shop worker -l info







##########################ditect last activity middle ware in django if need active status



01. add a field into CustomUser Model.
last_activity = models.DateTimeField(null=True, blank=True)



#02 in api/middleware/last_activity.py
# middleware/last_activity.py

from django.utils import timezone

class UpdateLastActivityMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)
        if request.user.is_authenticated:
            request.user.last_activity = timezone.now()
            request.user.save(update_fields=['last_activity'])
        return response



# o3 setting.py middleware section

'api.middleware.last_activity.UpdateLastActivityMiddleware',




migrations and migrate
