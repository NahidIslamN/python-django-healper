import os

from rest_framework.decorators import api_view
from rest_framework.response import Response

import stripe
# This is your test secret API key.
stripe.api_key = 'your_secret_key'




@api_view(['POST'])
def create_checkout_session(request, price_id):
    try:
        checkout_session = stripe.checkout.Session.create(
            line_items=[
                {
                    'price': f'{price_id}',
                    'quantity': 1,
                },
            ],
            mode='payment',
            success_url='http://127.0.0.1:8000',
            cancel_url='http://127.0.0.1:8000/product',
        )
    except Exception as e:
        return Response({"error":str(e)}) 

    return Response({'checkout_url': checkout_session.url})








### Create a Product in Stripe

@api_view(["POST"])
def create_product(request):
    try:
        # Create a product
        product = stripe.Product.create(
            name="Test Product2",
            description="This is a test product from Django",
            default_price_data={
                "unit_amount": 1000,  # price in cents (e.g., $10.00)
                "currency": "usd",
            },
            expand=["default_price"]
        )

        return Response({
            "product_id": product.id,
            "product_name": product.name,
            "price_id": product.default_price.id
        })

    except stripe.error.StripeError as e:
        return Response({"error": str(e)}, status=400)








#Get Trangection


@api_view(["GET"])
def chargelist(request):


    # List all charges (by default returns 10, max is 100 per request)
    charges = stripe.Charge.list(limit=100)

    return Response(charges, status=status.HTTP_200_OK)








## Web Hock


import stripe
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.conf import settings



@csrf_exempt
def stripe_webhook(request):
    payload = request.body
    sig_header = request.META['HTTP_STRIPE_SIGNATURE']
    event = None

    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, 'sk_test_your_testkfnveL8iiZ4UJMZuXGiuIZRrg800key'
        )
    except ValueError as e:
        # Invalid payload
        return HttpResponse(status=400)
    except stripe.error.SignatureVerificationError as e:
        # Invalid signature
        return HttpResponse(status=400)

    # ðŸ”½ Handle the event
    if event['type'] == 'checkout.session.completed':
        session = event['data']['object']
        your_custom_function(session)

    return HttpResponse(status=200)

def your_custom_function(session_data):
    print("Stripe Checkout Session completed!")
    # Change the Product Paid Status
    print(session_data)  # Do something meaningful here
